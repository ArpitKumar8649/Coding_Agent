/**\n * Test Optimized Streaming Implementation\n */\n\nconst WebSocket = require('ws');\nconst fetch = require('node-fetch');\n\nasync function testOptimizedStreaming() {\n  console.log('üß™ Testing Optimized Streaming Implementation\\n');\n  \n  const API_URL = 'http://localhost:3002';\n  const WS_URL = 'ws://localhost:3002/ws';\n  const API_KEY = 'development-key';\n  \n  try {\n    // Test 1: Health Check\n    console.log('1Ô∏è‚É£ Testing backend health...');\n    const healthResponse = await fetch(`${API_URL}/health`);\n    const health = await healthResponse.json();\n    console.log('‚úÖ Health check passed:', health.status);\n    console.log('üìä Features:', health.features);\n    \n    // Test 2: WebSocket Connection\n    console.log('\\n2Ô∏è‚É£ Testing WebSocket connection...');\n    \n    const ws = new WebSocket(WS_URL);\n    \n    return new Promise((resolve, reject) => {\n      let connected = false;\n      let authenticated = false;\n      \n      ws.on('open', () => {\n        console.log('‚úÖ WebSocket connected');\n        connected = true;\n        \n        // Send authentication\n        ws.send(JSON.stringify({\n          type: 'authenticate',\n          apiKey: API_KEY,\n          userId: 'test-user',\n          features: {\n            compression: true,\n            fileTransfer: true,\n            collaboration: true,\n            batching: true\n          }\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        try {\n          const message = JSON.parse(data.toString());\n          console.log('üì® Received:', message.type);\n          \n          if (message.type === 'connection_established') {\n            console.log('üîó Connection established with features:', message.features);\n          }\n          \n          if (message.type === 'authenticated') {\n            console.log('üîê Authentication successful:', message.success);\n            console.log('‚ö° Advanced features:', message.features);\n            authenticated = true;\n            \n            // Test streaming\n            console.log('\\n3Ô∏è‚É£ Testing optimized streaming...');\n            ws.send(JSON.stringify({\n              type: 'start_stream',\n              streamId: 'test-stream-001',\n              requestType: 'chat_message',\n              request: {\n                sessionId: 'test-session',\n                message: 'Create a simple calculator using HTML and CSS',\n                mode: 'ACT'\n              },\n              compression: true,\n              quality: 'advanced',\n              batchSize: 5,\n              realTimeValidation: true\n            }));\n          }\n          \n          if (message.type === 'stream_started') {\n            console.log('üåä Stream started:', message.streamId);\n            console.log('üîß Optimizations:', message.optimizations);\n          }\n          \n          if (message.type === 'batched_updates') {\n            console.log('üì¶ Batched updates received:', message.chunks.length, 'chunks');\n            message.chunks.forEach((chunk, index) => {\n              if (chunk.data && chunk.data.content) {\n                process.stdout.write(chunk.data.content);\n              }\n            });\n          }\n          \n          if (message.type === 'stream_update') {\n            if (message.data && message.data.content) {\n              process.stdout.write(message.data.content);\n              if (message.data.quality) {\n                console.log(`\\nüìä Quality: ${message.data.quality}/10`);\n              }\n            }\n          }\n          \n          if (message.type === 'stream_complete') {\n            console.log('\\n\\n‚úÖ Stream completed successfully!');\n            console.log('üìã Result:', message.result ? 'Received' : 'None');\n            \n            setTimeout(() => {\n              ws.close();\n              resolve(true);\n            }, 1000);\n          }\n          \n          if (message.type === 'error') {\n            console.error('‚ùå Error:', message.message);\n            reject(new Error(message.message));\n          }\n          \n        } catch (error) {\n          console.error('‚ùå Failed to parse message:', error);\n        }\n      });\n      \n      ws.on('error', (error) => {\n        console.error('‚ùå WebSocket error:', error);\n        reject(error);\n      });\n      \n      ws.on('close', (code, reason) => {\n        console.log(`üîå WebSocket closed: ${code} - ${reason || 'No reason'}`);\n        if (!authenticated) {\n          reject(new Error('Connection closed before authentication'));\n        } else {\n          resolve(true);\n        }\n      });\n      \n      // Timeout after 30 seconds\n      setTimeout(() => {\n        if (!connected) {\n          reject(new Error('Connection timeout'));\n        }\n      }, 30000);\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Test failed:', error);\n    return false;\n  }\n}\n\n// Run the test\ntestOptimizedStreaming()\n  .then((success) => {\n    if (success) {\n      console.log('\\nüéâ All tests passed! Optimized streaming is working.');\n      console.log('\\nüìä Test Summary:');\n      console.log('  ‚úÖ Backend health check');\n      console.log('  ‚úÖ WebSocket connection');\n      console.log('  ‚úÖ Authentication with features');\n      console.log('  ‚úÖ Optimized streaming');\n      console.log('  ‚úÖ Batched updates');\n      console.log('  ‚úÖ Real-time responses');\n    } else {\n      console.log('\\n‚ùå Some tests failed.');\n    }\n    process.exit(success ? 0 : 1);\n  })\n  .catch((error) => {\n    console.error('\\n‚ùå Test execution failed:', error);\n    process.exit(1);\n  });"