/**
 * Advanced Cline API Server Startup
 */

require('dotenv').config({ path: '.env.advanced' });

const app = require('./enhanced-server');
const mongoService = require('./services/mongoService');

async function startServer() {
    try {
        // Connect to MongoDB
        console.log('üîå Connecting to MongoDB...');
        await mongoService.connect();
        
        // Create workspaces directory
        const fs = require('fs').promises;
        const workspaceDir = process.env.WORKSPACE_DIR || './workspaces';
        await fs.mkdir(workspaceDir, { recursive: true });
        console.log(`üìÅ Workspace directory ready: ${workspaceDir}`);
        
        const PORT = process.env.PORT || 3001;
        
        const server = app.listen(PORT, () => {
            console.log(`
üöÄ Advanced Cline API Server running on port ${PORT}

üìä Advanced Features Enabled:
  ‚Ä¢ Sophisticated System Prompts (6000+ lines)
  ‚Ä¢ Plan vs Act Mode System  
  ‚Ä¢ Advanced Tool Orchestration
  ‚Ä¢ Git Awareness & Auto-commit
  ‚Ä¢ Quality-Enhanced Code Generation
  ‚Ä¢ Real-time Streaming & Validation
  ‚Ä¢ Iterative Refinement Loops
  ‚Ä¢ MongoDB Session Persistence

üîó API Endpoints:
  ‚Ä¢ POST /api/sessions - Create new advanced session
  ‚Ä¢ POST /api/sessions/:id/messages - Process message with enhanced capabilities
  ‚Ä¢ POST /api/sessions/:id/mode - Switch between PLAN and ACT modes
  ‚Ä¢ GET /api/capabilities - View advanced capabilities
  ‚Ä¢ POST /api/test/quality - Test quality-enhanced generation

üéØ Quality Levels: poor, medium, advanced
üîÑ Modes: PLAN (planning & discussion) | ACT (implementation)
üìã Git: ${process.env.ENABLE_GIT !== 'false' ? 'Enabled' : 'Disabled'}
üîë API Key: ${process.env.API_KEY ? 'Configured ‚úÖ' : 'Not configured ‚ùå'}
ü§ñ Model: ${process.env.DEFAULT_MODEL}
`);
        });

        // Graceful shutdown
        process.on('SIGINT', async () => {
            console.log('\nüõë Shutting down server...');
            await mongoService.disconnect();
            server.close(() => {
                console.log('‚úÖ Server shut down gracefully');
                process.exit(0);
            });
        });

    } catch (error) {
        console.error('‚ùå Server startup failed:', error);
        process.exit(1);
    }
}

startServer();